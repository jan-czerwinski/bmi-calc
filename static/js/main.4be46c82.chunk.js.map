{"version":3,"sources":["app/App.js","serviceWorker.js","index.js"],"names":["resetKey","localStorage","clear","setItem","window","location","reload","getItem","Calc","props","state","date","bmi","handleSubmit","bind","now","getFullYear","getMonth","getDay","event","preventDefault","height","parseInt","target","bmiHeight","value","weight","bmiWeight","output","this","setState","formatDate","Date","String","toFixed","alert","len","length","i","row","JSON","parse","push","console","log","readHistory","reverse","map","index","id","key","newKey","removeItem","genKey","keyObj","obj","Object","assign","stringify","align","onSubmit","autocomplete","type","name","onClick","History","renderTableData","React","Component","className","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGA,SAASA,IACPC,aAAaC,QACbD,aAAaE,QAAQ,IAAK,GAC1BC,OAAOC,SAASC,SA0Ba,OAA5BL,aAAaM,QAAQ,MAAaP,I,IAE/BQ,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAM,CACTC,KAAO,KACPC,IAAM,MAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANJ,E,wEASPC,GACT,OAAOA,EAAIC,cAAc,IAAID,EAAIE,WAAW,IAAIF,EAAIG,W,mCAGzCC,GACXA,EAAMC,iBACN,IAAMC,EAASC,SAASH,EAAMI,OAAOC,UAAUC,OAAQ,IACjDC,EAASJ,SAASH,EAAMI,OAAOI,UAAUF,OAC/C,GAAKJ,EAASK,GAAU,EAAxB,CAIA,IAAME,EAASF,EAASL,EAASA,EACjCQ,KAAKC,SAAS,CACZnB,KAAOkB,KAAKE,WAAW,IAAIC,MAC3BpB,IAAMqB,OAAOL,EAAOM,QAAQ,WAN5BC,MAAM,yE,wCAUR,OA/CJ,WAGE,IAFA,IAAMP,EAAS,GACTQ,EAAMnC,aAAaoC,OAAQ,EACzBC,EAAI,EAAGA,EAAIF,EAAKE,IAAI,CAC1B,IAAMC,EAAMC,KAAKC,MAAMxC,aAAaM,QAAQ+B,IAC5CV,EAAOc,KAAKH,GAGTD,IAAIF,EAAI,IACTO,QAAQC,IAAIL,GACZI,QAAQC,IAAIN,IAGhB,OAAOV,EAkCEiB,GAAcC,UAAUC,IAAI,SAACR,EAAKS,GAAW,IACxCC,EAAkBV,EAAlBU,GAAItC,EAAc4B,EAAd5B,KAAMC,EAAQ2B,EAAR3B,IAClB,OACI,wBAAIsC,IAAKD,GACT,4BAAKA,GACL,4BAAKtC,GACL,4BAAKC,Q,+BAQb,GAAsB,OAAnBiB,KAAKnB,MAAME,IAAa,CACzB,IAAMsC,EArEZ,WACE,IAAMC,EAAS7B,SAASrB,aAAaM,QAAQ,MAG7C,OAFAN,aAAamD,WAAW,KACxBnD,aAAaE,QAAQ,IAAMgD,EAAO,GAC3BA,EAiESE,GACNC,EAAS,CAACL,GAAIC,EAAI,GAClBK,EAAM1B,KAAKnB,MACjB8C,OAAOC,OAAOF,EAAKD,GACnBrD,aAAaE,QAAQ+C,EAAKV,KAAKkB,UAAUH,IAG3C,OACE,yBAAKI,MAAM,UACT,0BAAMC,SAAU/B,KAAKhB,aAAcgD,aAAa,OAAhD,mCACwB,6BACtB,2BAAOC,KAAK,OAAOC,KAAK,cAAc,6BAFxC,6BAGyB,6BACvB,2BAAOD,KAAK,OAAOC,KAAK,cAAa,6BACrC,2BAAOD,KAAK,SAASrC,MAAM,eAC3B,2BAAOqC,KAAK,SAASrC,MAAM,kBAAkBuC,QAAShE,KAExD,kBAACiE,EAAD,CAASxC,MAASI,KAAKqC,yB,GA7DZC,IAAMC,WAkEzB,SAASH,EAAQxD,GACf,OAAGR,aAAaoC,OAAS,EAErB,yBAAKgC,UAAU,WACb,+BACE,+BACE,4BACE,kCACA,oCACA,qCAGJ,+BACG5D,EAAMgB,SAMV,KAcM6C,MAXf,WACE,OACE,yBAAKD,UAAU,OACX,gDACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCnHUE,QACW,cAA7BnE,OAAOC,SAASmE,UAEe,UAA7BpE,OAAOC,SAASmE,UAEhBpE,OAAOC,SAASmE,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4be46c82.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction resetKey(){\n  localStorage.clear()\n  localStorage.setItem(\"i\", 0);\n  window.location.reload(); //TODO rerenderowanie a nie odswierzanie\n}\n\nfunction genKey(){\n  const newKey = parseInt(localStorage.getItem(\"i\"))\n  localStorage.removeItem(\"i\")\n  localStorage.setItem(\"i\", (newKey+1))\n  return newKey\n}\n\nfunction readHistory(){\n  const output = []\n  const len = localStorage.length -1\n  for(let i = 0; i < len; i++){\n    const row = JSON.parse(localStorage.getItem(i))\n    output.push(row)\n\n    //debug\n    if(i===len-1){\n      console.log(row)\n      console.log(i)\n    }\n  }\n  return output\n}\n\nif(localStorage.getItem(\"i\")===null) resetKey()  //nie działa?\n\nclass Calc extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      date : null,\n      bmi : null,\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  formatDate(now){\n    return now.getFullYear()+\"-\"+now.getMonth()+\"-\"+now.getDay()\n  }\n\n  handleSubmit(event){\n    event.preventDefault()\n    const height = parseInt(event.target.bmiHeight.value) /100 //100 zamienia cm na m\n    const weight = parseInt(event.target.bmiWeight.value)\n    if(!(height * weight >= 0)){  //sprawdza czy to liczby i czy sa dodatnie\n      alert(\"Proszę podać prawidłową wagę i/lub wzrost!\")\n      return\n    }\n    const output = weight / height / height\n    this.setState({\n      date : this.formatDate(new Date()),\n      bmi : String(output.toFixed(2)),\n    })\n  }\n  renderTableData(){\n    return readHistory().reverse().map((row, index) => {\n        const { id, date, bmi } = row\n        return (\n            <tr key={id}>\n            <td>{id}</td>\n            <td>{date}</td>\n            <td>{bmi}</td>\n            </tr>\n          )\n        })\n      }\n\n\n  render(){\n    if(this.state.bmi !== null){\n      const key = genKey()\n      const keyObj = {id:(key+1)}\n      const obj = this.state\n      Object.assign(obj, keyObj)\n      localStorage.setItem(key, JSON.stringify(obj))\n    }\n\n    return (\n      <div align=\"center\">\n        <form onSubmit={this.handleSubmit} autocomplete=\"off\">\n          Podaj swoją wagę[kg]: <br/>\n          <input type=\"text\" name=\"bmiWeight\" /><br/>\n          Podaj swój wzrost[cm]: <br/>\n          <input type=\"text\" name=\"bmiHeight\"/><br/>\n          <input type=\"submit\" value=\"Oblicz BMI\"/>\n          <input type=\"button\" value=\"Zresetuj Tabele\" onClick={resetKey}/>\n        </form>\n        <History value = {this.renderTableData()}/>\n      </div>\n  )};\n}\n\nfunction History(props){\n  if(localStorage.length > 1){\n    return (\n      <div className=\"History\">\n        <table>\n          <thead>\n            <tr>\n              <th>lp</th>\n              <th>Data</th>\n              <th>BMI</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.value}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n  return null\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1> Kalkulator BMI </h1>\n        <div className=\"Calculator\">\n          <Calc />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}